<html>

<head>
    <title>Dalai LLaMA</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body,
        pre {
            margin: 0;
            padding: 0px;
            color: rgba(0, 0, 0, 0.8);
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }
        
        .input-field {
            /*
    border: 2px solid rgba(0,0,0,0.2);
    */
            background: rgba(0, 0, 0, 0.04);
            display: flex;
            padding: 10px;
            box-sizing: border-box;
        }
        
        #input {
            white-space: pre-wrap;
            padding: 5px;
            outline: none;
            border: none;
            flex-grow: 1;
            font-size: 14px;
            box-sizing: border-box;
        }
        
        #input:focus {
            outline: none;
        }
        /* Button Styles */
        
        button {
            padding: 10px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            border: none;
            border-radius: 3px;
            outline: none;
            box-sizing: border-box;
            cursor: pointer;
        }
        
        button:hover {
            background: rgba(0, 0, 0, 1);
        }
        
        .light-btn {
            background: rgba(0, 0, 0, 0.2);
            color: black;
        }
        
        .light-btn:hover {
            background: rgba(0, 0, 0, 0.15);
        }
        
        .danger-btn {
            background: rgba(255, 0, 0, 0.6);
        }
        
        .danger-btn:hover {
            background: rgba(255, 0, 0, 0.8);
        }
        
        #messages {
            list-style-type: none;
            margin: 0;
            box-sizing: border-box;
            font-size: 14px;
            padding: 0;
        }
        
        #messages>li {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            padding: 10px;
            font-size: 14px;
            box-sizing: border-box;
        }
        
        #messages>li:nth-child(odd) {
            background: #efefef;
        }
        
        li {
            white-space: pre-wrap;
        }
        
        .loading {
            margin-bottom: 10px;
            padding: 10px;
            box-sizing: border-box;
            color: rgba(0, 0, 0, 0.7);
            font-size: 14px;
            background: #efefef;
        }
        
        .hidden {
            display: none !important;
        }
        
        .input-container {
            margin: 10px;
        }
        
        .info {
            font-size: 12px;
            padding: 5px;
        }
        
        .form-header {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            margin: 0;
            background: rgba(0, 0, 0, 0.04);
            padding: 10px 20px;
        }
        
        .stretch {
            flex-grow: 1;
        }
        
        input[type=text],
        select {
            border: none;
            background: rgba(0, 0, 0, 0.08);
            padding: 5px 10px;
            box-sizing: border-box;
            width: 100px;
        }
        
        .logo {
            font-weight: bold;
            text-decoration: none;
            color: black;
            display: block;
            font-size: 30px;
            letter-spacing: -1px;
            font-weight: bold;
            font-family: georgia;
        }
        
        .config-container {
            display: flex;
            flex-wrap: wrap;
        }
        
        .kv {
            display: block;
            font-size: 14px;
            margin-left: 10px;
        }
        
        .kv label {
            display: block;
            padding: 5px 0px;
            font-weight: bold;
            color: rgba(0, 0, 0, 0.7);
            font-size: 12px;
        }
    </style>
</head>

<body>
    <form id="form" action="">
        <div class='form-header'></div>
        <div class='input-container'>
            <div class='input-field'>
                <div contenteditable id='input'></div>
                <button>Autocomplete</button>
            </div>
            <div class='info'>TIP: shift+enter for multiple lines</div>
        </div>
    </form>
    <button class="danger-btn" onclick="clearHistory()">Clear History</button>
    <pre class='loading hidden'></pre>
    <ul id="messages"></ul>
    <script src="/socket.io.min.js"></script>
    <script>
        const config = {
            seed: -1,
            threads: 4,
            n_predict: 200,
            top_k: 40,
            top_p: 0.9,
            temp: 0.1,
            repeat_last_n: 64,
            repeat_penalty: 1.3,
            debug: false,
            models: []
        }
        const socket = io();
        const form = document.getElementById('form');
        const input = document.querySelector('#input');
        const model = document.querySelector('#model');
        const renderHeader = (config) => {
            const fields = [{
                key: "debug",
                type: "checkbox"
            }, "n_predict", "repeat_last_n", "repeat_penalty", "top_k", "top_p", "temp", "seed"].map((key) => {
                if (typeof key === "string") {
                    return `<div class='kv'>
<label>${key}</label>
<input name="${key}" type='text' placeholder="${key}" value="${config[key] || ''}">
</div>`
                } else {
                    if (key.type === "checkbox") {
                        return `<div class='kv'>
<label>${key.key}</label>
<input name="${key.key}" type='checkbox' ${config[key.key] ? "checked" : ""}>
</div>`
                    }
                }

            }).join("")


            config.model = config.models[0]
            const models = config.models.map((model, i) => {
                return `<option value="${model}" ${i === 0 ? "selected" : ""}>${model}</option>`
            }).join("")
            return `<a class='logo' href="/">Dalai</a><div class='stretch'></div>
<div class='config-container'>
${fields}
<div class='kv'>
<label>model</label>
<select id="model" name="model">${models}</select>
</div>
</div>`
        }
        const loading = (on) => {
            if (on) {
                document.querySelector(".loading").textContent = on
                document.querySelector(".loading").classList.remove("hidden")
            } else {
                document.querySelector(".loading").textContent = ""
                document.querySelector(".loading").classList.add("hidden")
            }
        }
        document.querySelector("form").addEventListener("input", (e) => {
            if (e.target.tagName === "SELECT") {
                config[e.target.name] = config.models[e.target.selectedIndex]
            } else if (e.target.type === "checkbox") {
                config[e.target.name] = e.target.checked
            } else {
                config[e.target.name] = e.target.value
            }
        })
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            e.stopPropagation()
            if (input.textContent) {
                //config.prompt = input.textContent.replaceAll("\n", "\\n");
                config.prompt = input.textContent
                config.id = "TS-" + Date.now() + "-" + Math.floor(Math.random() * 100000)
                socket.emit('request', config)
                config.id = null
                loading(config.prompt)
                input.textContent = "";
            }
        });
        input.addEventListener("keydown", (e) => {
            if (e.keyCode === 13) {
                e.preventDefault();
                if (e.shiftKey) {
                    document.execCommand("insertLineBreak");
                } else {
                    form.requestSubmit()
                }
            }
        })

        const sha256 = async(input) => {
            const textAsBuffer = new TextEncoder().encode(input);
            const hashBuffer = await window.crypto.subtle.digest("SHA-256", textAsBuffer);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hash = hashArray
                .map((item) => item.toString(16).padStart(2, "0"))
                .join("");
            return hash;
        };
        const clearHistory = () => {
            messages.replaceChildren()
        }
        const say = (msg, id) => {
            let item = document.createElement('li');
            if (id) item.setAttribute("data-id", id)
            item.textContent = msg;
            messages.prepend(item);
        }
        socket.emit('request', {
            method: "installed"
        })
        socket.on('result', async({
            request,
            response
        }) => {
            loading(false)
            console.log(response)
            if (request.method === "installed") {
                if (response == "\n\n<end>") {
                    document.querySelector(".form-header").innerHTML = renderHeader(config)
                } else {
                    config.models.push(response)
                }
            } else {
                const id = request.id
                let existing = document.querySelector(`[data-id='${id}']`)
                if (response == "\n\n<end>") {
                    // Add a delete button
                    let deleteButton = document.createElement('button');
                    deleteButton.className = 'light-btn'
                    deleteButton.textContent = 'X';
                    deleteButton.addEventListener('click', function() {
                        existing.remove();
                    });
                    existing.appendChild(deleteButton);
                } else {
                    if (existing) {
                        existing.textContent = existing.textContent + response
                        existing.textContent = existing.textContent.replaceAll(/\r?\n\x1B\[\d+;\d+H./g, "");
                        //existing.textContent = existing.textContent.replaceAll("\\n", "\n");
                    } else {
                        say(response, id)
                    }
                }
            }
        });
    </script>
</body>

</html>