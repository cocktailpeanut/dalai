<html>

<head>
    <title>Dalai LLaMA</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="/css/fontawesome.min.css" rel="stylesheet" />
    <link href="/css/solid.min.css" rel="stylesheet" />
    <style>
        body,
        pre {
            margin: 0;
            padding: 0px;
            color: rgba(0, 0, 0, 0.8);
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }
        
        .input-field {
            /*
    border: 2px solid rgba(0,0,0,0.2);
    */
            display: flex;
            padding: 10px;
            box-sizing: border-box;
        }
        
        #input {
            white-space: pre-wrap;
            border: 1px solid rgba(0, 0, 0, 0.2);
            padding: 20px;
            outline: none;
            flex-grow: 1;
            font-size: 14px;
            box-sizing: border-box;
            background: white;
        }
        
        #input:focus {
            outline: none;
        }
        
        #input:empty:before {
            content: attr(placeholder);
            color: lightgray;
            position: relative;
        }
        /* Button Styles */
        
        .icon-container {
            position: relative;
            display: inline-block;
            margin-left: 3px;
            color: rgba(0, 0, 0, 0.8);
        }
        
        .info-text {
            visibility: hidden;
            position: absolute;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 3px;
            white-space: normal;
            font-size: 11px;
            width: 150px;
            overflow-wrap: break-word;
        }
        
        .icon-container:hover .info-text {
            visibility: visible;
        }
        
        button {
            padding: 10px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            border: none;
            outline: none;
            box-sizing: border-box;
            cursor: pointer;
        }
        
        button:hover {
            background: rgba(0, 0, 0, 1);
        }
        
        .transparent-btn {
            background: transparent;
            color: rgba(0, 0, 0, 0.8);
        }
        
        .transparent-btn:hover {
            background: rgba(0, 0, 0, 0.1);
        }
        
        .danger-btn {
            background: rgb(244, 67, 54, 0.8);
        }
        
        .danger-btn:hover {
            background: rgb(244, 67, 54, 1);
        }
        
        .messages-header {
            display: flex;
            justify-content: flex-end;
            margin: 10px;
        }
        
        .messages-header>button {
            padding: 5px 10px;
        }
        
        #messages {
            list-style-type: none;
            margin: 0;
            box-sizing: border-box;
            font-size: 14px;
            padding: 0;
        }
        
        #messages>li,
        .loading {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 10px;
            padding: 20px;
            padding-right: 10px;
            font-size: 14px;
            box-sizing: border-box;
        }
        
        #messages>li:nth-child(odd) {
            background: #efefef;
        }
        
        li {
            white-space: pre-wrap;
        }
        
        .message-content-container {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .message-content-container>p {
            margin: 0;
            margin-top: 10px;
            padding: 0;
            color: rgba(0, 0, 0, 0.6);
        }
        
        .message-no-prompt {
            border-radius: 5px;
            padding: 10px;
            background-color: rgba(0, 0, 0, 0.1);
        }
        
        .loading {
            box-sizing: border-box;
            color: rgba(0, 0, 0, 0.7);
            font-size: 14px;
            background: #efefef;
        }
        
        #loading-progress {
            height: 3px;
            width: 0;
            background: #2196f3;
            transition: width 1s ease-in;
        }
        
        .hidden {
            display: none !important;
        }
        
        .input-container {
            background: rgba(0, 0, 0, 0.06);
        }
        
        .input-container button {
            padding: 30px;
            margin-left: 10px;
        }
        
        .info {
            font-size: 12px;
            padding: 0 5px 10px;
        }
        
        .info button {
            padding: 5px 10px;
            margin-right: 10px;
        }
        
        .form-header {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            margin: 0;
            background: rgba(0, 0, 0, 0.9);
            padding: 10px 20px;
        }
        
        .stretch {
            flex-grow: 1;
        }
        
        .form-header input[type=text],
        .form-header select {
            border: none;
            background: #444;
            color: white;
            padding: 5px 10px;
            box-sizing: border-box;
            width: 100px;
        }
        
        .form-header select {
            width: 150px;
        }
        
        .logo {
            color: white;
            font-weight: bold;
            text-decoration: none;
            display: block;
            font-size: 30px;
            letter-spacing: -1px;
            font-weight: bold;
            font-family: georgia;
        }
        
        .config-container {
            display: flex;
            flex-wrap: wrap;
        }
        
        .kv {
            display: block;
            font-size: 14px;
            margin-left: 10px;
        }
        
        .kv label {
            text-align: right;
            display: block;
            padding: 5px 0px;
            color: rgba(255, 255, 255, 0.9);
            font-size: 12px;
        }
        
        .prompt-header {
            display: flex;
            align-items: center;
            padding: 10px 20px 0;
            box-sizing: border-box;
            font-size: 14px;
            background: rgba(0, 0, 0, 0.06);
        }
        
        .prompt-header select {
            margin: 0 10px;
            flex-grow: 1;
            padding: 5px;
            border: 1px solid rgba(0, 0, 0, 0.2);
            max-width: 200px;
        }
        
        .prompt-header button {
            padding: 7px 10px;
            font-size: 12px;
        }
        
        button {
            cursor: pointer;
        }
        
        #prompt-cancel {
            background: none;
            color: white;
            background: rgba(0, 0, 0, 0.7);
        }
        
        #prompt-cancel i {
            padding: 5px;
        }
    </style>
</head>

<body>
    <form id="form" action="">
        <div class='form-header'></div>
        <div class="prompt-header">
            <label for="prompt-select">Select a template</label>
            <div class="icon-container">
                <i class="fa-solid fa-circle-info"></i>
                <span class="info-text">Templates help generate better results.<br/><br/>Add custom templates in ~/user/dalai/config/prompts as .txt files.</span>
            </div>
            <select id="prompt-select"></select>
            <input type="checkbox" id="show-prompt-checkbox" checked>
            <label for="show-prompt-checkbox">Show template</label>
            <div class="icon-container">
                <i class="fa-solid fa-circle-info"></i>
                <span class="info-text">Uncheck this for a cleaner interaction with Dalai. <br/><br/> If checked, replace >PROMPT with your desired input.</span>
            </div>
            <div class='stretch'></div>
        </div>
        <div class='input-container'>
            <div class='input-field'>
                <div contenteditable id='input' placeholder="test"></div>
                <button id='prompt-run'>Go</button>
                <button id="prompt-cancel" class='hidden'><i class="fa-solid fa-circle-notch fa-spin"></i> Cancel</button>
            </div>
            <div class='info'>
                <button id="prompt-reset">Reset</button>
                <span>TIP: ctrl+enter (âŒ˜+enter for mac) to submit</span>
            </div>
        </div>
    </form>
    <div class="messages-header">
        <button class='danger-btn' onclick="clearHistory()"><i class="fa-solid fa-eraser"></i> Clear All</button>
    </div>
    <div id="loading-progress"></div>
    <li class='loading hidden'>
        <span id="loading-message"></span>
        <button class='transparent-btn message-action'><i class="fa-solid fa-spinner fa-spin-pulse"></i></button>
    </li>
    <ul id="messages"></ul>
    <script src="/socket.io.min.js"></script>
    <script>
        const str = localStorage.getItem("config")
        let config
        if (str) {
            try {
                config = JSON.parse(str)
            } catch (e) {}
        }
        if (!config) {
            config = {
                seed: -1,
                threads: 4,
                n_predict: 200,
                top_k: 40,
                top_p: 0.9,
                temp: 0.8,
                repeat_last_n: 64,
                repeat_penalty: 1.3,
                debug: false,
                models: []
            }
        }
        const socket = io();
        const form = document.getElementById('form');
        const input = document.querySelector('#input');
        const showPromptCheckbox = document.getElementById('show-prompt-checkbox');
        const model = document.querySelector('#model');
        const renderHeader = (config) => {
            const fields = [{
                key: "debug",
                type: "checkbox"
            }, "n_predict", "repeat_last_n", "repeat_penalty", "top_k", "top_p", "temp", "seed", "threads"].map((key) => {
                if (typeof key === "string") {
                    return `<div class='kv'>
<label>${key}</label>
<input name="${key}" type='text' placeholder="${key}" value="${config[key] || ''}">
</div>`
                } else {
                    if (key.type === "checkbox") {
                        return `<div class='kv'>
<label>${key.key}</label>
<input name="${key.key}" type='checkbox' ${config[key.key] ? "checked" : ""}>
</div>`
                    }
                }

            }).join("")

            if (!str) config.model = config.models[0]
            const models = config.models.map((model, i) => {
                return `<option value="${model}" ${config.model === model ? "selected" : ""}>${model}</option>`
            }).join("")
            return `<a class='logo' href="/">Dalai</a><div class='stretch'></div>
<div class='config-container'>
${fields}
<div class='kv'>
<label>model</label>
<select id="model" name="model">${models}</select>
</div>
</div>`
        }

        const escapeNewLine = (arg) => navigator.userAgent.toLowerCase() === 'win' ? arg.replaceAll(/\n/g, "\\n").replaceAll(/\r/g, "\\r") : arg
        const escapeDoubleQuotes = (arg) => navigator.userAgent.toLowerCase() === 'win' ? arg.replaceAll(/"/g, '`"') : arg.replaceAll(/"/g, '\\"')
        const loading = (prompt, input) => {
            if (prompt) {
                let messageContent = document.createElement('span');
                document.getElementById("loading-message").textContent = input
                document.querySelector(".loading").classList.remove("hidden")

                activePrompt = escapeDoubleQuotes(escapeNewLine(prompt))
                activeInput = input;
            } else {
                document.getElementById("loading-message").textContent = ""
                document.querySelector(".loading").classList.add("hidden")
            }
        }
        const promptSelect = document.getElementById('prompt-select');
        const resetButton = document.querySelector("#prompt-reset")
        document.querySelector("form").addEventListener("input", (e) => {
            if (e.target.tagName === "SELECT") {
                config[e.target.name] = config.models[e.target.selectedIndex]
            } else if (e.target.type === "checkbox") {
                config[e.target.name] = e.target.checked
            } else {
                config[e.target.name] = e.target.value
            }
        })
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            e.stopPropagation()
            if (input.textContent) {
                //config.prompt = input.textContent.replaceAll("\n", "\\n");
                config.prompt = showPromptCheckbox.checked ? input.textContent : config.selectedPromptValue.replace('>PROMPT', input.textContent);
                config.id = "TS-" + Date.now() + "-" + Math.floor(Math.random() * 100000)
                document.querySelector("#prompt-run").classList.add("hidden")
                document.querySelector("#prompt-cancel").classList.remove("hidden")
                delete config.html
                localStorage.setItem("config", JSON.stringify(config))
                socket.emit('request', config)
                config.id = null
                loading(config.prompt, input.textContent)
                updateInputToPrompt()
            }
        });
        input.addEventListener("keydown", (e) => {
            if (e.keyCode === 13 && (e.metaKey || e.ctrlKey)) {
                e.preventDefault();
                form.requestSubmit()
            }
        })
        document.querySelector("#prompt-cancel").addEventListener("click", (e) => {
            e.preventDefault()
            e.stopPropagation()
            socket.emit("request", {
                prompt: "/stop"
            })
            resetPromptRequest()

            // Add a delete button
            let messageList = document.querySelector('#messages')
            let messageAction = messageList.querySelector('.message-action');
            messageAction.innerHTML = '<i class="fa-solid fa-trash-can"></i>';
            messageAction.addEventListener('click', function() {
                existing.remove();
            });
        })

        // Load prompts from files
        const rawTemplateToObj = (template) => {
            const templateConfig = {};

            // Regular expression to match parameters and their values
            const parameterRegex = /@(\w+)\s+(.*)\n/g;

            // Match all parameter-value pairs in the input string
            let match;
            while ((match = parameterRegex.exec(template)) !== null) {
                const [fullMatch, parameter, value] = match;
                if (parameter !== "configend") {
                    templateConfig[parameter] = value.trim();
                }
            }

            // Get the text after @configend and add it to the object
            const promptStartIndex = template.indexOf("@configend") + "@configend".length;
            const text = template.substring(promptStartIndex).trim();
            templateConfig.prompt = text;

            return templateConfig;
        };

        // Update the input text with the selected prompt value
        const updateInputToPrompt = (promptValue) => {
            const {
                prompt: selectedPromptValue,
                placeholder,
                gotext,
                endpattern
            } = rawTemplateToObj(promptSelect.value)
                // const selectedPromptValue = promptSelect.value;
            const currentInputValue = input.textContent;

            config = {
                ...config,
                selectedPromptValue,
                placeholder,
                gotext,
                endpattern
            }

            input.textContent = selectedPromptValue; // Update input to be value if given one to replace

            input.setAttribute('placeholder', placeholder || "")
            document.getElementById("prompt-run").textContent = gotext || "Go"
            input.setAttribute('endpattern', endpattern || "")

            if (showPromptCheckbox.checked) {
                // Move the cursor to the first instance of ">PROMPT" and select only the word ">PROMPT"
                const promptIndex = input.textContent.indexOf('>PROMPT');
                if (promptIndex >= 0) {
                    const range = document.createRange();
                    const selection = window.getSelection();
                    let promptEndIndex
                        // Replace the >PROMPT value if provided
                    if (promptValue) {
                        input.textContent = selectedPromptValue.replace('>PROMPT', promptValue);
                        promptEndIndex = promptIndex + promptValue.length;
                    } else {
                        promptEndIndex = promptIndex + ">PROMPT".length;
                    }
                    range.setStart(input.childNodes[0], promptIndex);
                    range.setEnd(input.childNodes[0], promptEndIndex);
                    selection.removeAllRanges();
                    selection.addRange(range);
                }
            } else {
                input.textContent = ""
            }

            // Focus the input
            input.focus();
        }
        fetch('./prompts')
            .then(response => response.json())
            .then(prompts => {
                if (prompts.length === 0) {
                    promptSelect.disabled = true;
                    return;
                }

                // Sort prompts alphabetically by category and prompt name
                prompts.sort((a, b) => {
                    const categoryA = getCategoryName(a.name);
                    const categoryB = getCategoryName(b.name);
                    if (categoryA !== categoryB) {
                        return categoryA.localeCompare(categoryB);
                    }
                    return a.name.localeCompare(b.name);
                });

                // Populate prompt options
                let currentCategory = "";
                let currentOptgroup = null;
                prompts.forEach(prompt => {
                    const option = document.createElement('option');
                    option.value = prompt.value;
                    option.textContent = prompt.name;

                    const category = getCategoryName(prompt.name);

                    if (category !== currentCategory) {
                        currentCategory = category;
                        currentOptgroup = promptSelect.querySelector(`optgroup[label="${category}"]`);
                        if (!currentOptgroup) {
                            currentOptgroup = document.createElement('optgroup');
                            currentOptgroup.label = category;
                            promptSelect.appendChild(currentOptgroup);
                        }
                    }

                    if (!currentOptgroup) {
                        currentOptgroup = document.createElement('optgroup');
                        currentOptgroup.label = "other";
                        promptSelect.appendChild(currentOptgroup);
                    }

                    const subOption = document.createElement('option');
                    subOption.value = prompt.value;
                    subOption.textContent = getPromptName(prompt.name);
                    currentOptgroup.appendChild(subOption);
                });

                function getCategoryName(name) {
                    const categoryIndex = name.indexOf('-');
                    if (categoryIndex !== -1) {
                        return name.slice(0, categoryIndex);
                    }
                    return "other";
                }

                function getPromptName(name) {
                    const categoryIndex = name.indexOf('-');
                    if (categoryIndex !== -1) {
                        return `${name.slice(0, categoryIndex)}/${name.slice(categoryIndex+1, name.length)}`
                    }
                    return name;
                }

                // Select the "default" prompt if it exists, otherwise select the first prompt
                const defaultPrompt = prompts.find(prompt => prompt.name.toLowerCase() === 'default (alpaca)');
                const initialPrompt = defaultPrompt || prompts[0];
                promptSelect.value = initialPrompt.value;
                input.textContent = initialPrompt.value;

                promptSelect.addEventListener('change', () => updateInputToPrompt());
                resetButton.addEventListener('click', (e) => {
                    e.preventDefault() // Prevent form from submitting
                    updateInputToPrompt()
                });

                updateInputToPrompt();
            })
            .catch(error => {
                console.error('Error loading prompts:', error);
            });


        const sha256 = async(input) => {
            const textAsBuffer = new TextEncoder().encode(input);
            const hashBuffer = await window.crypto.subtle.digest("SHA-256", textAsBuffer);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hash = hashArray
                .map((item) => item.toString(16).padStart(2, "0"))
                .join("");
            return hash;
        };

        showPromptCheckbox.addEventListener('change', function() {
            if (showPromptCheckbox.checked) {
                updateInputToPrompt(input.textContent)
            } else {
                input.textContent = ''
            }
        });

        const clearHistory = () => {
            if (confirm('Are you sure you want to clear all history messages?\nThis action cannot be undone and all messages will be lost.')) {
                messages.replaceChildren()
            }
        }
        const say = (msg, id) => {
            let item = document.createElement('li');
            if (id) item.setAttribute("data-id", id)

            let messageContentContainer = document.createElement('div');
            messageContentContainer.className = 'message-content-container'
            let messagePrompt = document.createElement('span');

            messagePrompt.innerHTML = msg;
            messageContentContainer.appendChild(messagePrompt)

            let messageContent = document.createElement('span');
            if (!showPromptCheckbox.checked) {
                messageContent.className = `message-content ${!showPromptCheckbox.checked ? 'message-no-prompt' : ''}`
                let messagePromptTitle = document.createElement('p');
                messagePromptTitle.className = 'message-prompt-title info'
                const currPromptName = promptSelect.options[promptSelect.selectedIndex].textContent
                messagePromptTitle.textContent = currPromptName
                messageContentContainer.appendChild(messagePromptTitle)
            } else {
                messageContent.className = `message-content`
            }

            messageContentContainer.appendChild(messageContent)

            let messageAction = document.createElement('button');
            messageAction.className = 'message-action transparent-btn'
            messageAction.innerHTML = '<i class="fa-solid fa-spinner fa-spin-pulse"></i>';

            item.appendChild(messageContentContainer)
            item.appendChild(messageAction)
            messages.prepend(item);
        }
        socket.emit('request', {
            method: "installed"
        })

        // Keep track of the output
        let tokenStartLen = 0;
        let responseStart = false;
        let activePrompt;
        let activeInput;
        let promptProgress = 0;

        const resetPromptRequest = () => {
            document.querySelector("#prompt-run").classList.remove("hidden")
            document.querySelector("#prompt-cancel").classList.add("hidden")

            // Reset output generation
            activePrompt = undefined
            activeInput = undefined
            tokenStartLen = 0
            promptProgress = 0
            responseStart = false
        }

        socket.on('result', async({
            request,
            response
        }) => {
            if (request.method === "installed") {
                if (response == "\n\n<end>") {
                    document.querySelector(".form-header").innerHTML = renderHeader(config)
                } else {
                    config.models = Array.from(new Set(config.models).add(response))
                }
            } else {
                const id = request.id
                let existing = document.querySelector(`[data-id='${id}']`)
                let loadingProgress = document.getElementById('loading-progress')
                loading(false)

                // Output is still your original prompt
                if (!responseStart && activePrompt) {
                    // Filter out common errors that the terminal may spit back
                    if (response.includes(`repeat_penalty = `)) {
                        console.log('NAH')
                        return
                    }

                    tokenStartLen += escapeNewLine(escapeDoubleQuotes(response)).length;
                    promptProgress = (tokenStartLen / activePrompt.length) * 100;

                    if (existing) {
                        loadingProgress.style.width = `${promptProgress}%`
                    } else {
                        say(activeInput, id)
                    }

                    if (tokenStartLen >= activePrompt.length) {
                        responseStart = true;
                        // Hide progress bar
                        loadingProgress.style.width = 0
                    }
                } else if (response == "\n\n<end>") {
                    resetPromptRequest()
                        // Add a delete button
                    let messageAction = existing.querySelector('.message-action');
                    messageAction.innerHTML = '<i class="fa-solid fa-trash-can"></i>';
                    messageAction.addEventListener('click', function() {
                        existing.remove();
                    });
                } else {
                    if (existing) {
                        let messageContent = existing.querySelector('.message-content')
                        let newMessage = messageContent.textContent + response

                        let containsEndIdx = request.endpattern ? newMessage.lastIndexOf(request.endpattern) : -1;
                        if (containsEndIdx > -1) {
                            const resultString = messageContent.textContent.substring(0, containsEndIdx);
                            messageContent.textContent = resultString;

                            socket.emit("request", {
                                prompt: "/stop"
                            })
                            resetPromptRequest()

                            // Add a delete button
                            let messageAction = existing.querySelector('.message-action');
                            messageAction.innerHTML = '<i class="fa-solid fa-trash-can"></i>';
                            messageAction.addEventListener('click', function() {
                                existing.remove();
                            });
                        } else {
                            // Add token to message
                            if (newMessage.trim().length > 0) { // if it's just whitespace, don't update message 
                                messageContent.textContent = newMessage
                            }
                        }
                        //existing.innerHTML = existing.innerHTML.replaceAll(/\r?\n\x1B\[\d+;\d+H./g, "");
                        //existing.textContent = existing.textContent.replaceAll("\\n", "\n");
                    }
                }
            }
        });
    </script>
</body>

</html>