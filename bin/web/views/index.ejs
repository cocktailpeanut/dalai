<html>
<head>
<title>Dalai LLaMA</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
  body { margin: 0; padding: 0px; color: rgba(0,0,0,0.8); font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }
  .input-field {
  /*
    border: 2px solid rgba(0,0,0,0.2);
    */
    background: rgba(0,0,0,0.04);
    display: flex;
    padding: 10px;
    box-sizing: border-box;
  }
  #input {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    resize: none;
    padding: 5px;
    outline: none;
    border: none;
    flex-grow: 1;
    font-size: 14px;
    box-sizing: border-box;
    background: transparent;
  }
  #input:focus { outline: none; }
  button { padding: 10px; background: rgba(0,0,0,0.8); color: white; border: none; border-radius: 3px; outline: none; box-sizing: border-box; }

  #messages { list-style-type: none; margin: 0; box-sizing: border-box; font-size: 14px; padding: 0; }
  #messages > li { padding: 10px; font-size: 14px; box-sizing: border-box; }
  #messages > li:nth-child(odd) { background: #efefef; }
  li { white-space: pre-wrap; }
  .loading {
    margin-bottom: 10px;
    padding: 10px;
    box-sizing: border-box;
    color: rgba(0,0,0,0.7);
    font-size: 14px;
    background: #efefef;
  }
  .hidden {
    display: none !important;
  }
  .input-container {
    margin: 10px;
  }
  .info {
    font-size: 12px;
    padding: 5px;
  }
  .form-header {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    margin: 0;
    background: rgba(0,0,0,0.04);
    padding: 10px 20px;
  }
  .stretch {
    flex-grow: 1;
  }
  input[type=text] , select {
    margin-right: 5px;
    border: none;
    background: rgba(0,0,0,0.08);
    padding: 5px 10px;
    box-sizing: border-box;
  }
  .logo {
    font-weight: bold;
    text-decoration: none;
    color: black;
    display: block;
    font-size: 30px;
    letter-spacing: -1px;
    font-weight: bold;
    font-family: georgia;

  }
  .config-container {
    display: flex;
    flex-wrap: wrap;
  }
  .kv {
    display: block;
    font-size: 14px;
  }
  .kv label {
    display: block;
    padding: 5px 0px;
    font-weight: bold;
    color: rgba(0,0,0,0.7);
    font-size: 12px;
  }
</style>
</head>
<body>
<form id="form" action="">
  <div class='form-header'></div>
  <div class='input-container'>
    <div class='input-field'>
      <textarea id='input'></textarea>
      <button>Autocomplete</button>
    </div>
    <div class='info'>TIP: shift+enter for multiple lines</div>
  </div>
</form>
<pre class='loading hidden'></pre>
<ul id="messages"></ul>
<script src="/socket.io.min.js"></script>
<script>
const config = {
  seed: -1,
  threads: 4,
  n_predict: 1000,
  model: "7B",
  top_k: 40,
  top_p: 0.9,
  temp: 0.8,
  repeat_last_n: 64,
  repeat_penalty: 1.3,
  models: []
}
const socket = io();
const form = document.getElementById('form');
const input = document.querySelector('#input');
const model = document.querySelector('#model');
const renderHeader = (config) => {
  const fields = ["n_predict", "repeat_last_n", "repeat_penalty", "top_k", "top_p", "temp", "seed"].map((key) => {
    return `<div class='kv'>
<label>${key}</label>
<input name="${key}" type='text' placeholder="${key}" value="${config[key] || ''}">
</div>`

  }).join("")


  const models = config.models.map((model) => {
    return `<option value="7B" ${config.model === model ? "selected" : ""}>${model}</option>`
  }).join("")
  return `<a class='logo' href="/">Dalai</a><div class='stretch'></div>
<div class='config-container'>
${fields}
<div class='kv'>
<label>model</label>
<select id="model" name="model">${models}</select>
</div>
</div>`
}
const loading = (on) => {
  if (on) {
    document.querySelector(".loading").textContent = on
    document.querySelector(".loading").classList.remove("hidden")
  } else {
    document.querySelector(".loading").textContent = ""
    document.querySelector(".loading").classList.add("hidden")
  }
}
document.querySelector("form").addEventListener("input", (e) => {
  if (e.target.tagName === "SELECT") {
    config[e.target.name] = config.models[e.target.selectedIndex]
  } else {
    config[e.target.name] = e.target.value
  }
})
form.addEventListener('submit', (e) => {
  e.preventDefault();
  e.stopPropagation()
  if (input.value && input.value.length > 0) {
    config.prompt = input.value
    socket.emit('request', config)
    loading(config.prompt)
    input.value = "";
    input.rows = "1";
  }
});
input.addEventListener("keydown", (e) => {
  if (e.keyCode === 13) {
    e.preventDefault();
    if (e.shiftKey) {
      input.rows = (parseInt(input.rows ?? '1', 10) + 1) + '';
      document.execCommand("insertLineBreak");
    } else {
      form.requestSubmit()
    }
  }
})

const sha256 = async (input) => {
  const textAsBuffer = new TextEncoder().encode(input);
  const hashBuffer = await window.crypto.subtle.digest("SHA-256", textAsBuffer);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  const hash = hashArray
    .map((item) => item.toString(16).padStart(2, "0"))
    .join("");
  return hash;
};
const say = (msg, id) => {
  let item = document.createElement('li');
  if (id) item.setAttribute("data-id", id);
  let content = document.createElement('pre');
  item.appendChild(content);
  content.innerText = msg;
  messages.prepend(item);
}
socket.emit('request', {
  method: "installed"
})
socket.on('result', async ({ request, response }) => {
  loading(false)
  if (request.method === "installed") {
    if (response == "\n\n<end>") {
      document.querySelector(".form-header").innerHTML = renderHeader(config)
    } else {
      config.models.push(response)
    }
  } else {
    if (response == "\n\n<end>") {
    } else {
      const id = await sha256(request.prompt) 
      let existing = document.querySelector(`[data-id='${id}']`)
      if (existing) {
        existing.textContent = existing.textContent + response
      } else {
        say(response, id)
      }
    }
  }
});
</script>
</body>
</html>
